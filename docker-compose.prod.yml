services:
  postgres_db:
    image: postgres:15
    container_name: todo_postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  redis_cache:
    image: redis:7
    container_name: todo_redis_cache
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - backend

  todo_api:
    container_name: todo_web_api
    build:
      context: .
      dockerfile: src/Presentation/TodoWebApi.Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development # Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${CONNECTION_STRING}
      - Cache__ConnectionString=${CACHE_CONNECTION_STRING}
      - JWT__Key=${JWT_KEY}
      - JWT__AccessTokenLifetimeMinutes=${ACCESS_TOKEN_LIFETIME_MINUTES}
      - JWT__RefreshTokenLifetimeDays=${REFRESH_TOKEN_LIFETIME_DAYS}
      - JWT__Issuer=${JWT_ISSUER}
      - JWT__Audience=${JWT_AUDIENCE}
    depends_on:
      - postgres_db
      - redis_cache
    networks:
      - backend

  nginx:
    image: nginx:latest
    container_name: todo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - todo_api
    networks:
      - backend

  adminer:
    image: adminer
    container_name: todo_adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
    networks:
      - backend

volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data

networks:
  backend:
    driver: bridge
